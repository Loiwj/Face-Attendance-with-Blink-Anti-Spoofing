import streamlit as st
import cv2
import pickle
import uuid
import numpy as np
from datetime import datetime
import pandas as pd
import time
import os

from utils.db import init_db, add_user, add_face_samples, fetch_users, fetch_logs, delete_user, get_face_samples
from utils.face_recog import load_model, get_face, train_model

# Make sure the models directory exists
os.makedirs('models', exist_ok=True)

# Initialize database and model
conn = init_db()
model = load_model()

# Set page config
st.set_page_config(
    page_title="H·ªá Th·ªëng Ch·∫•m C√¥ng Khu√¥n M·∫∑t",
    page_icon="üë•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Create sidebar for navigation
st.sidebar.title("Qu·∫£n L√Ω Ch·∫•m C√¥ng")
page = st.sidebar.radio("Trang", ["Th√™m Ng∆∞·ªùi D√πng", "Qu·∫£n L√Ω Ng∆∞·ªùi D√πng", "L·ªãch S·ª≠ Ch·∫•m C√¥ng", "Hu·∫•n Luy·ªán M√¥ H√¨nh"])

# Simplified camera function that doesn't auto-rerun
def capture_face_simple():
    st.write("ƒêang m·ªü camera. Vui l√≤ng ƒë·ª£i...")
    
    # Placeholder for camera feed
    frame_placeholder = st.empty()
    status_text = st.empty()
    
    # Capture controls
    col1, col2 = st.columns(2)
    with col1:
        capture_button = st.button("Ch·ª•p ·∫¢nh", key="capture_simple")
    with col2:
        stop_button = st.button("D·ª´ng", key="stop_simple")
        
    # Start camera
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        st.error("Kh√¥ng th·ªÉ m·ªü camera. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi camera.")
        return None
    
    face_img = None
    running = True
    
    # Simple loop without experimental_rerun
    while running:
        ret, frame = cap.read()
        if not ret:
            st.error("Kh√¥ng th·ªÉ ƒë·ªçc khung h√¨nh t·ª´ camera.")
            break
            
        # Get face from frame
        face_roi, face_rect = get_face(model, frame)
        
        # Draw rectangle around face if detected
        if face_rect is not None:
            x, y, w, h = face_rect
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            status = "ƒê√£ ph√°t hi·ªán khu√¥n m·∫∑t! Nh·∫•n 'Ch·ª•p ·∫¢nh' ƒë·ªÉ l∆∞u."
        else:
            status = "Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. Vui l√≤ng ƒëi·ªÅu ch·ªânh v·ªã tr√≠."
            
        # Display status
        status_text.text(status)
        
        # Convert to RGB for display in Streamlit
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        frame_placeholder.image(frame_rgb, channels="RGB", use_column_width=True)
        
        # Check for button clicks
        if capture_button and face_roi is not None:
            face_img = face_roi
            break
            
        if stop_button:
            break
            
        # Small delay to reduce CPU usage
        time.sleep(0.05)
        
    # Close camera
    cap.release()
    
    if face_img is not None:
        st.success("ƒê√£ ch·ª•p khu√¥n m·∫∑t th√†nh c√¥ng!")
        
    return face_img

# Add user page
if page == "Th√™m Ng∆∞·ªùi D√πng":
    st.title("Th√™m Ng∆∞·ªùi D√πng M·ªõi")
    
    # Form to collect user information
    with st.form("user_form"):
        name = st.text_input("H·ªç v√† T√™n")
        submit_button = st.form_submit_button("Ti·∫øp t·ª•c")
        
        if submit_button and name:
            # Generate a unique ID for the user
            user_id = str(uuid.uuid4())[:8]
            
            # Add user to database
            add_user(conn, user_id, name)
            
            # Store in session state
            st.session_state['current_user_id'] = user_id
            st.session_state['current_user_name'] = name
            st.session_state['face_samples'] = []
            
            st.success(f"ƒê√£ t·∫°o ng∆∞·ªùi d√πng {name}. Ti·∫øp t·ª•c thu th·∫≠p m·∫´u khu√¥n m·∫∑t.")
            st.experimental_rerun()

    # If there's a current user, collect face samples
    if 'current_user_id' in st.session_state:
        st.subheader(f"Thu th·∫≠p m·∫´u khu√¥n m·∫∑t cho {st.session_state['current_user_name']}")
        
        st.write(f"S·ªë m·∫´u ƒë√£ thu th·∫≠p: {len(st.session_state.get('face_samples', []))}")
        st.write("Vui l√≤ng thu th·∫≠p √≠t nh·∫•t 5 m·∫´u v·ªõi c√°c g√≥c kh√°c nhau ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô ch√≠nh x√°c.")
        
        # Initialize mode state
        if 'capturing' not in st.session_state:
            st.session_state.capturing = False
        
        # Button to start/stop capturing
        if not st.session_state.capturing:
            if st.button("B·∫Øt ƒë·∫ßu thu th·∫≠p m·∫´u", key="start_simple_capture"):
                st.session_state.capturing = True
                st.experimental_rerun()
        else:
            # In capture mode
            face_img = capture_face_simple()
                
            # If a face was captured
            if face_img is not None:
                # Add to session state
                if 'face_samples' not in st.session_state:
                    st.session_state['face_samples'] = []
                
                st.session_state['face_samples'].append(face_img)
                st.session_state.capturing = False
                st.success(f"ƒê√£ thu th·∫≠p {len(st.session_state['face_samples'])} m·∫´u khu√¥n m·∫∑t!")
                st.experimental_rerun()
            else:
                # If stopped without capturing
                if st.button("Quay l·∫°i", key="back_from_capture"):
                    st.session_state.capturing = False
                    st.experimental_rerun()
            
        # Display captured samples
        if 'face_samples' in st.session_state and st.session_state['face_samples'] and not st.session_state.capturing:
            st.write("M·∫´u khu√¥n m·∫∑t ƒë√£ thu th·∫≠p:")
            
            # Display in a grid - 3 columns
            cols = st.columns(3)
            for i, face in enumerate(st.session_state['face_samples']):
                cols[i % 3].image(face, width=100, caption=f"M·∫´u {i+1}")
        
        # Save all face samples - only show when not capturing
        if not st.session_state.capturing and 'face_samples' in st.session_state and len(st.session_state['face_samples']) > 0:
            if st.button("L∆∞u t·∫•t c·∫£ m·∫´u khu√¥n m·∫∑t"):
                # Serialize face samples
                face_samples_blob = pickle.dumps(st.session_state['face_samples'])
                
                # Save to database
                add_face_samples(conn, st.session_state['current_user_id'], face_samples_blob)
                
                st.success("ƒê√£ l∆∞u t·∫•t c·∫£ m·∫´u khu√¥n m·∫∑t th√†nh c√¥ng!")
                
                # Clear session state
                del st.session_state['current_user_id']
                del st.session_state['current_user_name']
                del st.session_state['face_samples']
                st.session_state.capturing = False
                
                # Train the model with the new data
                st.info("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
                if train_model(conn, model):
                    st.success("ƒê√£ hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng!")
                else:
                    st.warning("Kh√¥ng th·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu.")
                
                # Redirect to user management
                st.experimental_rerun()

# User management page
elif page == "Qu·∫£n L√Ω Ng∆∞·ªùi D√πng":
    st.title("Qu·∫£n L√Ω Ng∆∞·ªùi D√πng")
    
    # Fetch all users
    users = fetch_users(conn)
    
    if not users:
        st.warning("Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng.")
    else:
        # Convert to DataFrame for easier display
        df = pd.DataFrame(users, columns=["ID", "H·ªç T√™n", "Ng√†y T·∫°o", "S·ªë M·∫´u Khu√¥n M·∫∑t"])
        
        # Format date
        df["Ng√†y T·∫°o"] = pd.to_datetime(df["Ng√†y T·∫°o"]).dt.strftime("%d/%m/%Y %H:%M")
        
        # Add a button column for delete
        st.dataframe(df, use_container_width=True)
        
        # User selection for action
        selected_user = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng:", 
                                    options=[f"{user[1]} (ID: {user[0]})" for user in users],
                                    format_func=lambda x: x.split(" (ID: ")[0])
        
        if selected_user:
            user_id = selected_user.split(" (ID: ")[1][:-1]
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("X√≥a Ng∆∞·ªùi D√πng", type="primary", use_container_width=True):
                    delete_user(conn, user_id)
                    st.success(f"ƒê√£ x√≥a ng∆∞·ªùi d√πng {selected_user.split(' (ID: ')[0]}")
                    st.experimental_rerun()
            
            with col2:
                if st.button("Thu Th·∫≠p Th√™m M·∫´u Khu√¥n M·∫∑t", use_container_width=True):
                    # Find the user in the users list
                    user_name = ""
                    for user in users:
                        if user[0] == user_id:
                            user_name = user[1]
                            break
                    
                    # Get existing face samples
                    existing_samples_blob = get_face_samples(conn, user_id)
                    existing_samples = []
                    
                    if existing_samples_blob:
                        existing_samples = pickle.loads(existing_samples_blob)
                    
                    # Store in session state
                    st.session_state['current_user_id'] = user_id
                    st.session_state['current_user_name'] = user_name
                    st.session_state['face_samples'] = existing_samples
                    
                    # Redirect to Add User page
                    st.experimental_rerun()

# Attendance log page
elif page == "L·ªãch S·ª≠ Ch·∫•m C√¥ng":
    st.title("L·ªãch S·ª≠ Ch·∫•m C√¥ng")
    
    logs = fetch_logs(conn, limit=100)
    
    if not logs:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ch·∫•m c√¥ng.")
    else:
        # Convert to DataFrame
        df = pd.DataFrame(logs, columns=["ID", "H·ªç T√™n", "Th·ªùi Gian"])
        
        # Format time
        df["Th·ªùi Gian"] = pd.to_datetime(df["Th·ªùi Gian"]).dt.strftime("%d/%m/%Y %H:%M:%S")
        
        # Group by date for better display
        df['Ng√†y'] = pd.to_datetime(df["Th·ªùi Gian"]).dt.date
        
        # Create expandable sections for each date
        unique_dates = sorted(df['Ng√†y'].unique(), reverse=True)
        
        for date in unique_dates:
            date_str = date.strftime("%d/%m/%Y")
            with st.expander(f"Ng√†y: {date_str}", expanded=(date == unique_dates[0])):
                day_logs = df[df['Ng√†y'] == date].drop('Ng√†y', axis=1)
                st.dataframe(day_logs, use_container_width=True)

# Model training page
elif page == "Hu·∫•n Luy·ªán M√¥ H√¨nh":
    st.title("Hu·∫•n Luy·ªán M√¥ H√¨nh Nh·∫≠n Di·ªán Khu√¥n M·∫∑t")
    
    st.write("""
// Hu·∫•n luy·ªán m√¥ h√¨nh nh·∫≠n di·ªán khu√¥n m·∫∑t v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán c√≥.
// B·∫°n n√™n th·ª±c hi·ªán vi·ªác n√†y sau khi th√™m ng∆∞·ªùi d√πng m·ªõi ho·∫∑c thu th·∫≠p th√™m m·∫´u khu√¥n m·∫∑t.
    """)
    
    if st.button("Hu·∫•n Luy·ªán M√¥ H√¨nh", type="primary"):
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
            success = train_model(conn, model)
            
        if success:
            st.success("Hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng!")
        else:
            st.error("Kh√¥ng th·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu.")